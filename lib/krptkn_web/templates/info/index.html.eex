<div id="wrapper">
  <div class="content-area">
    <div class="main">

      <div class="row sparkboxes mt-4">
        <div class="col-md-3">
          <div class="box box1">
            <div class="details">
              <h3 id="url_count">Unknown</h3>
              <h4>URLs</h4>
            </div>
            <div id="spark1"></div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="box box2">
            <div class="details">
              <h3 id="danger_count">Unknown</h3>
              <h4>Danger</h4>
            </div>
            <div id="spark2"></div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="box box3">
            <div class="details">
              <h3 id="metadata_count">Unknown</h3>
              <h4>Metadata</h4>
            </div>
            <div id="spark3"></div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="box box4">
            <div class="details">
              <h3 id="fmetadata_count">Unknown</h3>
              <h4>F. Metadata</h4>
            </div>
            <div id="spark4"></div>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-12">
          <div class="box shadow mt-4">
            <canvas id="scheduler_chart" width="100" height="50"></canvas>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-12">
          <div class="box shadow mt-4">
            <canvas id="memory_chart" width="100" height="50"></canvas>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-12">
          <div class="box shadow mt-4">
            <table class="table">
              <thead>
                <tr>
                  <th scope="col">Module</th>
                  <th scope="col">ID</th>
                  <th scope="col">Function</th>
                  <th scope="col">Reductions</th>
                  <th scope="col">Stack size</th>
                  <th scope="col">Heap size</th>
                  <th scope="col">State</th>
                </tr>
              </thead>
              <tbody id="process_table"></tbody>
            </table>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<script>
var memoryChart = initMemoryChart();
var schedulerChart = initSchedulerChart();

function updateAll() {
  // Update the URL count
  document.getElementById("url_count").innerHTML = json_get(
    "<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "url") %>"
  );

  // Update the Danger count
  document.getElementById("danger_count").innerHTML = json_get(
    "<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "danger") %>"
  );

  // Update the Metadata count
  document.getElementById("metadata_count").innerHTML = json_get(
    "<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "metadata") %>"
  );

  // Update the Fmetadata count
  document.getElementById("fmetadata_count").innerHTML = json_get(
    "<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "fmetadata") %>"
  );

  // Update the scheduler chart
  data = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "scheduler") %>")
  lista = [];
  var i = 0;
  for (s in data) {
    lista.push({
      data: data[s],
      borderColor: colors[i],
      label: s,
      fill: false
    });
    i++;
  }
  console.log(data)

  schedulerChart.data.datasets = lista;
  schedulerChart.update(0)

  memoryChart.data.datasets.forEach((dataset) => {
    switch (dataset.label) {
      case "Total":
        values = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "ets") %>");
        dataset.data = values;
        break;
      case "Processes":
        values = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "processes") %>");
        dataset.data = values;
        break;
      case "System":
        values = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "system") %>");
        dataset.data = values;
        break;
      case "Atom":
        values = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "atom") %>");
        dataset.data = values;
        break;
      case "Binary":
        values = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "binary") %>");
        dataset.data = values;
        break;
      case "Code":
        values = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "code") %>");
        dataset.data = values;
        break;
      case "Ets":
        values = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "ets") %>");
        dataset.data = values;
        break;
    }
  });
  memoryChart.update(0)

  // Update process table
  processes = json_get("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "processes") %>")
  document.getElementById("process_table").innerHTML = ""
  for (p of processes) {
    if (p.state == "online") {
      document.getElementById("process_table").innerHTML +=
        "<tr><td>" + p.module +
        "</td><td>" + p.id +
        "</td><td>"+ p.function +
        "</td><td>"+ p.reductions +
        "</td><td>"+ p.heap +
        "</td><td>"+ p.stack +
        "</td><td style=\"color:green\">"+ p.state +
        "</td></tr>";
    } else {
      document.getElementById("process_table").innerHTML +=
        "<tr class=\"bg-danger\"><td>" + p.module +
        "</td><td>" + p.id +
        "</td><td>"+ p.function +
        "</td><td>"+ p.reductions +
        "</td><td>"+ p.heap +
        "</td><td>"+ p.stack +
        "</td><td style=\"color:red\">"+ p.state +
        "</td></tr>";
    }
  }
}

const interval = setInterval(function() {
  updateAll();
}, 1500);
</script>
