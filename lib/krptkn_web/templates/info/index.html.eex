<div id="wrapper">
  <div class="content-area">
    <div class="main">

      <div class="row sparkboxes mt-4">
        <div class="col-md-3">
          <div class="box box1">
            <div class="details">
              <h3 id="url_count">Unknown</h3>
              <h4>URLs</h4>
            </div>
            <div id="spark1"></div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="box box2">
            <div class="details">
              <h3 id="danger_count">Unknown</h3>
              <h4>Danger</h4>
            </div>
            <div id="spark2"></div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="box box3">
            <div class="details">
              <h3 id="metadata_count">Unknown</h3>
              <h4>Metadata</h4>
            </div>
            <div id="spark3"></div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="box box4">
            <div class="details">
              <h3 id="fmetadata_count">Unknown</h3>
              <h4>F. Metadata</h4>
            </div>
            <div id="spark4"></div>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-12">
          <div class="box shadow mt-4">
            <canvas id="scheduler_chart" width="100" height="50"></canvas>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-12">
          <div class="box shadow mt-4">
            <canvas id="memory_chart" width="100" height="50"></canvas>
          </div>
        </div>
      </div>

      <div class="row mt-4">
        <div class="col-md-12">
          <div class="box shadow mt-4">
            <table class="table">
              <thead>
                <tr>
                  <th scope="col">Module</th>
                  <th scope="col">ID</th>
                  <th scope="col">Function</th>
                  <th scope="col">Reductions</th>
                  <th scope="col">Stack size</th>
                  <th scope="col">Heap size</th>
                  <th scope="col">State</th>
                </tr>
              </thead>
              <tbody id="process_table"></tbody>
            </table>
          </div>
        </div>
      </div>

    </div>
  </div>
</div>

<script>
var memoryChart = initMemoryChart();
var schedulerChart = initSchedulerChart();

function updateAll() {
  // Update the URL count
  $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "url") %>", function(data) {
    document.getElementById("url_count").innerHTML = data
  });

  // Update the Danger count
  $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "danger") %>", function(data) {
    document.getElementById("danger_count").innerHTML = data
  });

  // Update the Metadata count
  $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "metadata") %>", function(data) {
    document.getElementById("metadata_count").innerHTML = data
  });

  // Update the Fmetadata count
  $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "count", "fmetadata") %>", function(data) {
    document.getElementById("fmetadata_count").innerHTML = data
  });

  // Update the scheduler chart
  $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "scheduler") %>", function(data) {
    lista = [];
    var i = 0;
    for (s in data) {
      lista.push({
        data: data[s],
        borderColor: colors[i],
        label: s,
        fill: false
      });
      i++;
    }

    schedulerChart.data.datasets = lista;
    schedulerChart.update(0)
  });

  memoryChart.data.datasets.forEach((dataset) => {
    switch (dataset.label) {
      case "Total":
        $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "ets") %>", function(values) {
          dataset.data = values;
          memoryChart.update(0)
        });
        break;
      case "Processes":
        $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "processes") %>", function(values) {
          dataset.data = values;
          memoryChart.update(0)
        });
        break;
      case "System":
        $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "system") %>", function(values) {
          dataset.data = values;
          memoryChart.update(0)
        });
        break;
      case "Atom":
        $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "atom") %>", function(values) {
          dataset.data = values;
          memoryChart.update(0)
        });
        break;
      case "Binary":
        $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "binary") %>", function(values) {
          dataset.data = values;
          memoryChart.update(0)
        });
        break;
      case "Code":
        $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "code") %>", function(values) {
          dataset.data = values;
          memoryChart.update(0)
        });
        break;
      case "Ets":
        $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "memory", "ets") %>", function(values) {
          dataset.data = values;
          memoryChart.update(0)
        });
        break;
    }
  });

  // Update process table
  $.getJSON("<%= Routes.state_url(KrptknWeb.Endpoint, :index, "processes") %>", function(processes) {
    document.getElementById("process_table").innerHTML = ""
    for (p of processes) {
      if (p.state == "online") {
        document.getElementById("process_table").innerHTML +=
          "<tr><td>" + p.module +
          "</td><td>" + p.id +
          "</td><td>"+ p.function +
          "</td><td>"+ p.reductions +
          "</td><td>"+ p.heap +
          "</td><td>"+ p.stack +
          "</td><td style=\"color:green\">"+ p.state +
          "</td></tr>";
      } else {
        document.getElementById("process_table").innerHTML +=
          "<tr class=\"bg-danger\"><td>" + p.module +
          "</td><td>" + p.id +
          "</td><td>"+ p.function +
          "</td><td>"+ p.reductions +
          "</td><td>"+ p.heap +
          "</td><td>"+ p.stack +
          "</td><td style=\"color:red\">"+ p.state +
          "</td></tr>";
      }
    }
  });
}

$(document).ready(function() {
  // Fill the charts
  updateAll();

  // Change font color
  Chart.defaults.global.defaultFontColor = 'white';

  // Start the update interval
  const interval = setInterval(function() {
    updateAll();
  }, 4000);
});


</script>
